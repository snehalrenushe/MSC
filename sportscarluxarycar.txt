// Component interface
interface Car {
    void assemble();
}

// Concrete Component
class BasicCar implements Car {
    @Override
    public void assemble() {
        System.out.println("Basic Car");
    }
}

// Decorator abstract class
abstract class CarDecorator implements Car {
    protected Car decoratedCar;

    public CarDecorator(Car decoratedCar) {
        this.decoratedCar = decoratedCar;
    }

    @Override
    public void assemble() {
        decoratedCar.assemble();
    }
}

// Concrete Decorator 1
class SportsCar extends CarDecorator {
    public SportsCar(Car decoratedCar) {
        super(decoratedCar);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.println("Adding features of a Sports Car");
    }
}

// Concrete Decorator 2
class LuxuryCar extends CarDecorator {
    public LuxuryCar(Car decoratedCar) {
        super(decoratedCar);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.println("Adding features of a Luxury Car");
    }
}

// Client code
public class DecoratorPatternExample {
    public static void main(String[] args) {
        // Creating a basic car
        Car basicCar = new BasicCar();

        // Decorating with sports car features
        Car sportsCar = new SportsCar(basicCar);
        sportsCar.assemble();

        System.out.println(); // Adding a newline for better readability

        // Decorating with luxury car features
        Car luxuryCar = new LuxuryCar(basicCar);
        luxuryCar.assemble();
    }
}
